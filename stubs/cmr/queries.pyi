import sys
from datetime import datetime
from typing import Any, Optional, SupportsFloat, Union

if sys.version_info < (3, 9):
    from typing import List, MutableMapping, Sequence, Tuple
else:
    from builtins import list as List, tuple as Tuple
    from collections.abc import MutableMapping, Sequence

if sys.version_info < (3, 10):
    from typing_extensions import TypeAlias
else:
    from typing import TypeAlias

if sys.version_info < (3, 11):
    from typing import NoReturn as Never

    from typing_extensions import Self
else:
    from typing import Never, Self

CMR_OPS: str
CMR_UAT: str
CMR_SIT: str

FloatLike: TypeAlias = Union[str, SupportsFloat]
PointLike: TypeAlias = Tuple[FloatLike, FloatLike]

class Query:
    params: MutableMapping[str, Any]
    options: MutableMapping[str, Any]
    concept_id_chars: Sequence[str]
    headers: MutableMapping[str, str]

    def __init__(self, route: str, mode: str = ...) -> None: ...
    def _build_url(self) -> Union[str, Never]: ...
    def get(self, limit: int = ...) -> Union[List[Any], Never]: ...
    def hits(self) -> Union[int, Never]: ...
    def get_all(self) -> Union[List[Any], Never]: ...
    def parameters(self, **kwargs: Any) -> Self: ...
    def format(self, output_format: str = "json") -> Union[Self, Never]: ...
    def concept_id(self, ids: Sequence[str]) -> Union[Self, Never]: ...
    def provider(self, provider: str) -> Self: ...
    def mode(self, mode: str = ...) -> Union[None, Never]: ...
    def token(self, token: str) -> Self: ...
    def bearer_token(self, bearer_token: str) -> Self: ...

class GranuleCollectionBaseQuery(Query):
    def online_only(self, online_only: bool = True) -> Self: ...
    def temporal(
        self,
        date_from: Optional[Union[str, datetime]],
        date_to: Optional[Union[str, datetime]],
        exclude_boundary: bool = False,
    ) -> Union[Self, Never]: ...
    def short_name(self, short_name: str) -> Self: ...
    def version(self, version: str) -> Self: ...
    def point(self, lon: FloatLike, lat: FloatLike) -> Self: ...
    def circle(
        self, lon: FloatLike, lat: FloatLike, dist: FloatLike
    ) -> Union[Self, Never]: ...
    def polygon(self, coordinates: Sequence[PointLike]) -> Union[Self, Never]: ...
    def bounding_box(
        self,
        lower_left_lon: FloatLike,
        lower_left_lat: FloatLike,
        upper_right_lon: FloatLike,
        upper_right_lat: FloatLike,
    ) -> Self: ...
    def line(self, coordinates: Sequence[PointLike]) -> Self: ...
    def downloadable(self, downloadable: bool = True) -> Self: ...
    def entry_title(self, entry_title: str) -> Self: ...

class GranuleQuery(GranuleCollectionBaseQuery):
    def __init__(self, mode: str = ...) -> None: ...
    def orbit_number(
        self,
        orbit1: FloatLike,
        orbit2: Optional[FloatLike] = ...,
    ) -> Self: ...
    def day_night_flag(self, day_night_flag: str) -> Union[Self, Never]: ...
    def cloud_cover(
        self,
        min_cover: Optional[FloatLike] = ...,
        max_cover: Optional[FloatLike] = ...,
    ) -> Self: ...
    def instrument(self, instrument: str) -> Union[Self, Never]: ...
    def platform(self, platform: str) -> Union[Self, Never]: ...
    def sort_key(self, sort_key: str) -> Union[Self, Never]: ...
    def granule_ur(self, granule_ur: str) -> Union[Self, Never]: ...

class CollectionQuery(GranuleCollectionBaseQuery):
    def __init__(self, mode: str = ...) -> None: ...
    def archive_center(self, center: str) -> Self: ...
    def keyword(self, text: str) -> Self: ...
    def native_id(self, native_ids: Sequence[str]) -> Self: ...
    def tool_concept_id(self, ids: Sequence[str]) -> Union[Self, Never]: ...
    def service_concept_id(self, ids: Sequence[str]) -> Union[Self, Never]: ...

class ToolServiceVariableBaseQuery(Query):
    def native_id(self, native_ids: Sequence[str]) -> Self: ...
    def name(self, name: str) -> Self: ...

class ToolQuery(ToolServiceVariableBaseQuery):
    def __init__(self, mode: str = ...) -> None: ...

class ServiceQuery(ToolServiceVariableBaseQuery):
    def __init__(self, mode: str = ...) -> None: ...

class VariableQuery(ToolServiceVariableBaseQuery):
    def __init__(self, mode: str = ...) -> None: ...
